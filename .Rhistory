d1 = data.frame(id=1:3, x=1)
d2 = data.frame(id=1:3, q=2)
d3 = data.frame(id=1:3, z=3)
d1
d2
d3
f = function(a,b){merge(a,b, by='id')}
Reduce(f, list(d1,d2,d3))
d1 = data.frame(id=1:3, x=1)
d2 = data.frame(id=1:4, q=2)
d3 = data.frame(id=1:3, z=3)
d1
d2
d3
f = function(a,b){merge(a,b, by='id')}
Reduce(f, list(d1,d2,d3))
?merge
f = function(a,b){merge(a,b, by='id', all.x = all, all.y = all)}
Reduce(f, list(d1,d2,d3))
f = function(a,b){merge(a,b, by='id', all.x = TRUE, all.y = TRUE)}
Reduce(f, list(d1,d2,d3))
library(purr)
string <- c("Hiphopopotamus", "Rhymenoceros", "time for bottomless lyrics")
pattern <- "t.m"
grep(pattern, string)
# String Manipulation
library(stringr)
str_detect(string, pattern)
str_subset(string, pattern)
string <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = "instance|percentage"
str_detect(strings, pattern)
stringr:sentences
stringr::sentences
stringr::sentences[1:5]
pattern = "instance&percentage"
str_detect(strings, pattern)
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
strings = c(pos, neg)
strings
str_detect(strings, pattern)
pattern
pattern <- c("sold", "great")
str_detect(strings, pattern)
all(str_detect(strings, pattern))
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = c("instance","percentage")
str_detect(strings, pattern)
pattern
strings
str_detect(strings, pattern)
str_detect(strings, pattern)
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = c("instance","percentage")
str_detect(strings, pattern)
pattern = "instance|percentage"
str_detect(strings, pattern)
str_detect(strings, "instance")
str_detect(strings, "percentage")
str_detect(strings, "instance") * str_detect(strings, "percentage")
str_detect(strings, "instance") AND str_detect(strings, "percentage")
str_detect(strings, "instance") & str_detect(strings, "percentage")
pattern = c("instance","percentage")
str_c(pattern, sep="|")
str_c(pattern)
pattern
str_c(pattern)
str_c(pattern, collapse = "|")
#https://stackoverflow.com/questions/46260080/r-and-operator-in-regex
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
str_detect(strings, pattern)
all(str_detect(strings, pattern))
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
strings = c(pos, neg)
str_detect(strings, pattern)
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
strings = c(pos, neg)
pattern <- c("sold", "great")
str_detect(strings, pattern)
apply(strings, str_detect(pattern))
apply(strings, str_detect(.,pattern))
apply(strings, function(x) str_detect(x,pattern))
apply(strings, function(x) {str_detect(x,pattern)})
lapply(strings, function(x) {str_detect(x,pattern)})
lapply(strings, str_detect(pattern))
lapply(strings, function(x) {str_detect(x,pattern)})
lapply(strings, function(x) {all(str_detect(x,pattern))})
sapply(strings, function(x) {all(str_detect(x,pattern))})
vapply(strings, function(x) {all(str_detect(x,pattern))})
lapply(strings, function(x) {all(str_detect(x,pattern))})
unlist(lapply(strings, function(x) {all(str_detect(x,pattern))}))
Map(strings, str_detect(pattern))
unlist(lapply(strings, function(x) {all(str_detect(x,pattern))}))
str_locate_all(strings, pattern)
strings
pattern
pattern
str_locate_all(strings, pattern)
strings
pattern
all(str_detect(strings, pattern))
?all
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = "instance&percentage"
str_detect(strings, pattern)
pattern = c("instance","percentage")
str_detect(strings, pattern)
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = "instance|percentage"
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = "instance|percentage"
str_detect(strings, pattern)
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = c("instance","percentage")
str_detect(strings, pattern)
library(tidyverse)
library(purr)
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
strings = c(pos, neg)
pattern <- c("sold", "great")
all(str_detect(strings, pattern))
str_detect(strings, pattern)
unlist(lapply(strings, function(x) {all(grep(pattern,x))}))
#Below code works fine
unlist(lapply(strings, function(x) {all(str_detect(x,pattern))}))
all(str_detect(pos, pattern))
all(str_detect(neg, pattern))
str_detect(neg, pattern)
all(str_detect(pos, pattern))
str_detect(pos, pattern)
str_detect(pos, pattern)
all(str_detect(pos, pattern))
lapply(strings, str_detect(x,pattern))
lapply(strings, str_detect(.,pattern))
lapply(strings, str_detect(pattern))
pattern
install.packages("purr")
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
pattern = c("instance","percentage")
unlist(lapply(strings, function(x) {all(str_detect(x,pattern))}))
str_detect(strings, "instance") & str_detect(strings, "percentage")
unlist(lapply(strings, function(x) {all(str_detect(x,pattern))}))
install.packages('R.matlab')
library(R.matlab)  #install.packages('R.matlab')
sessionInfo()
pathname <- file.path("C://Users//mohammads6//Desktop//Battery Data//B0005.mat")
pathname
data <- readMat(pathname)
pathname <- file.path("D://Drive//projects//Navistar//Dataset//backup data//VIN_0017_01-04_to_03-20_concat_1//mat//VIN_0017_01-04_to_03-20_9.mat")
pathname
data1 <- readMat(pathname)
rm(data)
data2 <- readMat(pathname)
pathname <- file.path("C://Users//mohammads6//Desktop//Battery Data//B0005.mat")
data2 <- readMat(pathname)
data2[["charge"]]
data2[[1]]
data2[[1]][[1]]
data2[[1]][[1]][[1]]
data2[[1]][[1]][[2]]
data2[[1]][[1]][[3]]
data2[[1]][[1]][[4]]
data2[[1]][[1]][[4]][,1]
data2[[1]][[1]][[4]][[,1]]
data2[[1]][[1]][[4]][[1]]
len(data2[[1]][[1]][[4]][[1]])
length(data2[[1]][[1]][[4]][[1]])
length(data2[[1]][[1]][[4]][[2]])
length(data2[[1]][[1]][[4]][[3]])
length(data2[[1]][[1]][[4]][[1:6]])
data2[[1]][[1]][[4]][[1]]
data2[[1]][[1]][[4]][[2]]
data2[[1]][[1]][[4]][[2]]
data2[[1]][[1]][[4]][[1]]
class(data2)
length(data2)
length(data2[[1]])
length(data2[[1]][[1]])
data2[[1]][[1]][[4]][[1]]
type(data2[[1]][[1]][[4]][[1]])
class(data2[[1]][[1]][[4]][[1]])
dim(data2[[1]][[1]][[4]][[1]])
names(data2[[1]][[1]])
length(data2[[1]][[1]])
data2[[1]][[1]]
data2[[1]][[1]][,,1]
data2[[1]][[1]][,,1][,1]
data2[[1]][[1]][,,1][,1]$data
data2[[1]][[1]][,,1][,1]
data2[[1]][[1]][,,1]
data2[[1]][[1]][,,2]
data2[[1]][[1]][,,1]
data2[[1]][[1]][,,1]$data
data2[[1]][[1]][,,1]$data[, , 1]
data2[[1]][[1]][,,1]$data[, , 1]$
data2[[1]][[1]][,,2]
data2[[1]][[1]][,,1]$data[, , 1]$Voltage.measured
data2[[1]][[1]][,,1]$data[, , 1]#$Voltage.measured
type(data2[[1]][[1]][,,1]$data[, , 1])
class(data2[[1]][[1]][,,1]$data[, , 1])
lenth(data2[[1]][[1]][,,1]$data[, , 1])
length(data2[[1]][[1]][,,1]$data[, , 1])
unlit(data2[[1]][[1]][,,1]$data[, , 1])
unlist(data2[[1]][[1]][,,1]$data[, , 1])
unlist(data2[[1]][[1]][,,2]$data[, , 1])
data2[[1]][[1]][,,1]$data[, , 1]
# Each data is in the form
data2[[1]][[1]][,,1]
data2[[1]][[1]][,,1]$data[, , 1]$Voltage.measured
lapply(data2[[1]][[1]][,,1]$data[, , 1], unlist)
names(lapply(data2[[1]][[1]][,,1]$data[, , 1], unlist))
unlist(data2[[1]][[1]][,,1]$data[, , 1])
names(lapply(data2[[1]][[1]][,,2]$data[, , 1], unlist))
names(lapply(data2[[1]][[1]][,,3]$data[, , 1], unlist))
names(lapply(data2[[1]][[1]][,,4]$data[, , 1], unlist))
names(lapply(data2[[1]][[1]][,,5]$data[, , 1], unlist))
names(lapply(data2[[1]][[1]][,,6]$data[, , 1], unlist))
names(lapply(data2[[1]][[1]][,,7]$data[, , 1], unlist))
list_lists = lapply(data2[[1]][[1]][,,7]$data[, , 1], unlist)
list_lists
mat <- do.call("cbind",list_lists)
mat
lapply(data2[[1]][[1]][,,7]$data[, , 1], unlist)
lapply(data2[[1]][[1]][,,1]$data[, , 1], unlist)
names(data2[[1]][[1]][,,1]$data[, , 1])
list_lists = data2[[1]][[1]][,,1]$data[, , 1]
mat <- do.call("cbind",list_lists)
mat
list_lists$Time
list_lists$Current.measured
class(list_lists$Current.measured)
class(list_lists$Current.measured[1])
list_lists$Current.measured[1]
list_lists$Current.measured
class(list_lists$Current.measured[1,])
list_lists$Current.measured[1,]
as.vector(list_lists$Current.measured)
names(as.vector(list_lists$Current.measured))
class(list_lists$Current.measured[1,])
data2[[1]][[1]][,,1]$data[, , 1]
lapply(data2[[1]][[1]][,,1]$data[, , 1], '[[')
lapply(data2[[1]][[1]][,,1]$data[, , 1], '[[', dim)
lapply(data2[[1]][[1]][,,1]$data[, , 1], '[[', names)
data2[[1]][[1]][,,1]$data[, , 1]#$Voltage.measured
lapply(data2[[1]][[1]][,,1]$data[, , 1], function(X){unlist(x)[1,]})
lapply(data2[[1]][[1]][,,1]$data[, , 1], function(x){unlist(x)[1,]})
list_of_lists = lapply(data2[[1]][[1]][,,1]$data[, , 1], function(x){unlist(x)[1,]})
list_lists = lapply(data2[[1]][[1]][,,1]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
mat
df = data.frame(mat)
df
names(df)
data2[[1]][[1]][,,1]$time
names(df)
list_lists = lapply(data2[[1]][[1]][,,2]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
names(df)
df
len(data2[[1]][[1]])
length(data2[[1]][[1]])
list_lists = lapply(data2[[1]][[1]][,,10]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
names(df)
df
lapply(data2[[1]][[1]][,,1], function(x){x$type})
lapply(data2[[1]][[1]], function(x){x$type})
data2[[1]][[1]]
length(data2[[1]][[1]])
class(data2[[1]][[1]])
list(data2[[1]][[1]])
lapply(list(data2[[1]][[1]]), function(x){x$type})
file_num = 1
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
df
file_num = 2
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
names(df)
length(data2[[1]][[1]])
file_num = 2464
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
names(df)
file_num = 2463
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
file_num = 2463
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
file_num = 2461
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
file_num = 24
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
file_num = 2461
x = data2[[1]][[1]][,,2461]
data2[[1]][[1]]
lenght(data2[[1]][[1]])
length(data2[[1]][[1]])
data2[[1]][[1]]
dim(data2[[1]][[1]])
file_num = 249
list_lists = lapply(data2[[1]][[1]][,,file_num]$data[, , 1], function(x){unlist(x)[1,]})
mat <- do.call("cbind",list_lists)
df = data.frame(mat)
names(df)
df
paste(c("Here", "There", "Everywhere"))
paste(c("Here", "There", "Everywhere"), collapse = "-")
#How to find if a word is present in a vector of strings/sentences ?
#How to check if a string includes a specific word in R
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
str_detect(strings, "instance")
#How to find if a word is present in a vector of strings/sentences ?
#How to check if a string includes a specific word in R
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
library(stringr)
#How to find if a word is present in a vector of strings/sentences ?
#How to check if a string includes a specific word in R
strings <- c("instance", "percentage", "n",
"instance percentage", "percentage instance")
str_detect(strings, "instance")
#https://stackoverflow.com/questions/46260080/r-and-operator-in-regex
pos <- ("She sold seashells by the seashore, and she had a great time while doing so.") # contains sold and great
neg <- ("She bought seashells by the seashore, and she had a great time while doing so.") # contains great
strings = c(pos, neg)
str_detect(strings, pattern)
pattern <- c("sold", "great")
str_detect(strings, pattern)
strings
?str_detect
library(help="stringr")
str_detect(pos, pattern)
str_detect(strings, pattern)
str_detect(pos, pattern)
pattern
str_detect(neg, pattern)
strings
str_detect(strings, pattern)
political <- c("Clinton", "Obama")
str_detect("Clinton", fixed(political, ignore_case = TRUE))
d1 = data.frame(id=1:3, x=1)
d2 = data.frame(id=1:4, q=2)
d3 = data.frame(id=1:3, z=3)
d1
d2
d3
state.name
library(stringr)
str_detect("New", state.name)
?str_detect
str_detect(state.name, "New")
str_contains(state.name, "New")
str_contain(state.name, "New")
str_contains("hello", "hel")
str_subset(state.name, "New")
state.name[str_detect(state.name, "New")]
stri_detect_fixed("test",c("et","es"))
library(stringi)
stri_detect_fixed("test",c("et","es"))
stri_detect_fixed(c("test","testet"),c("et","es"))
stri_detect_fixed(c("test","testet"),c("et","es"))
stri_detect_fixed("test",c("et","es"))
library(stringr)
str_detect(fruit, "[aeiou]")
?str_detect
str_detect("aecfg", letters)
letters
LETTERS
library(help="stringr")
str_flatte("hello how are you")
str_flatten("hello how are you")
str_split("hello how are you")
str_split("hello how are you", sep=c(","," "))
str_split("hello how are you", sep=c(""," "))
str_split("hello how are you", sep=c("")
)
?str_split
str_split("hello how are you", ""
)
str_split("hello how are you", c(""," "))
df = readClipboard()
df
df
df = readClipboard()
df
sj_quotes = readLines("../datasets/steve_jobs_quotes")
## Steve Jobs Quotes
list.files("../datasets/")
sj_quotes = readLines("../datasets/steve_jobs_quotes.txt")
sj_quotes = readLines("../datasets/steve_jobs_quotes.txt")
sj_quotes
sj_quotes
length(sj_quotes)
pattern = "courage"
str_detect(string, pattern)
string = sj_quotes
pattern = "courage"
str_detect(string, pattern)
pattern = "Courage"
str_detect(string, pattern)
str_detect(string, courage)
pattern = "courage"
str_detect(string, pattern)
str_detect(string, pattern) %> count()
library(dplyr)
str_detect(string, pattern) %> count()
str_detect(string, pattern) %> count(pattern)
str_detect(string, pattern) %>% count()
str_detect(string, pattern) %>% table()
string = sj_quotes
pattern = "mistake"
str_detect(string, pattern) %>% table()
str_detect(string, pattern)
str_subset(string, pattern)
pattern = "vision"
str_detect(string, pattern)
str_subset(string, pattern)
string = tolower(sj_quotes)
string
str_detect(string, pattern) %>% table()
str_subset(string, pattern)
df = readClipboard()
df
df = readClipboard(sep="\t")
df
?readClipboard
df = readClipboard()
?readClipboard
df
marvel_movies = read.csv("../datasets/marvel_movies.csv", stringsAsFactors = FALSE)
marvel_movies
marvel_movies$Film
string = marvel_movies$Film
string
str_detect(string, "Man")
str_detect(string, "Man")
str_subset(string, "Man")
str_subset(string, "Woman")
str_detect(string, "Iron")
str_subset(string, "Iron")
str_subset(string, "Avenger")
str_subset(string, "Avenger\\b")
string
string = tolower(marvel_movies$Film)
string
str_subset(string, "the")
str_subset(string, "ant\\b")
string
library(keras)
set.seed(123)
